     1                                  ; Программа вычисления варианта
     2                                  ;--------------------------------
     3                                  %include 'in_out.asm'
     4                              <1> ;---------------   slen  -------------------
     5                              <1> ; Функция вычисления длины сообщения
     6                              <1> slen:                     
     7 00000000 53                  <1>     push    ebx             
     8 00000001 89C3                <1>     mov     ebx, eax        
     9                              <1>     
    10                              <1> nextchar:                   
    11 00000003 803800              <1>     cmp     byte [eax], 0   
    12 00000006 7403                <1>     jz      finished        
    13 00000008 40                  <1>     inc     eax             
    14 00000009 EBF8                <1>     jmp     nextchar        
    15                              <1>     
    16                              <1> finished:
    17 0000000B 29D8                <1>     sub     eax, ebx
    18 0000000D 5B                  <1>     pop     ebx             
    19 0000000E C3                  <1>     ret                     
    20                              <1> 
    21                              <1> 
    22                              <1> ;---------------  sprint  -------------------
    23                              <1> ; Функция печати сообщения
    24                              <1> ; входные данные: mov eax,<message>
    25                              <1> sprint:
    26 0000000F 52                  <1>     push    edx
    27 00000010 51                  <1>     push    ecx
    28 00000011 53                  <1>     push    ebx
    29 00000012 50                  <1>     push    eax
    30 00000013 E8E8FFFFFF          <1>     call    slen
    31                              <1>     
    32 00000018 89C2                <1>     mov     edx, eax
    33 0000001A 58                  <1>     pop     eax
    34                              <1>     
    35 0000001B 89C1                <1>     mov     ecx, eax
    36 0000001D BB01000000          <1>     mov     ebx, 1
    37 00000022 B804000000          <1>     mov     eax, 4
    38 00000027 CD80                <1>     int     80h
    39                              <1> 
    40 00000029 5B                  <1>     pop     ebx
    41 0000002A 59                  <1>     pop     ecx
    42 0000002B 5A                  <1>     pop     edx
    43 0000002C C3                  <1>     ret
    44                              <1> 
    45                              <1> 
    46                              <1> ;----------------  sprintLF  ----------------
    47                              <1> ; Функция печати сообщения с переводом строки
    48                              <1> ; входные данные: mov eax,<message>
    49                              <1> sprintLF:
    50 0000002D E8DDFFFFFF          <1>     call    sprint
    51                              <1> 
    52 00000032 50                  <1>     push    eax
    53 00000033 B80A000000          <1>     mov     eax, 0AH
    54 00000038 50                  <1>     push    eax
    55 00000039 89E0                <1>     mov     eax, esp
    56 0000003B E8CFFFFFFF          <1>     call    sprint
    57 00000040 58                  <1>     pop     eax
    58 00000041 58                  <1>     pop     eax
    59 00000042 C3                  <1>     ret
    60                              <1> 
    61                              <1> ;---------------  sread  ----------------------
    62                              <1> ; Функция считывания сообщения
    63                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    64                              <1> sread:
    65 00000043 53                  <1>     push    ebx
    66 00000044 50                  <1>     push    eax
    67                              <1>    
    68 00000045 BB00000000          <1>     mov     ebx, 0
    69 0000004A B803000000          <1>     mov     eax, 3
    70 0000004F CD80                <1>     int     80h
    71                              <1> 
    72 00000051 5B                  <1>     pop     ebx
    73 00000052 59                  <1>     pop     ecx
    74 00000053 C3                  <1>     ret
    75                              <1>     
    76                              <1> ;------------- iprint  ---------------------
    77                              <1> ; Функция вывода на экран чисел в формате ASCII
    78                              <1> ; входные данные: mov eax,<int>
    79                              <1> iprint:
    80 00000054 50                  <1>     push    eax             
    81 00000055 51                  <1>     push    ecx             
    82 00000056 52                  <1>     push    edx             
    83 00000057 56                  <1>     push    esi             
    84 00000058 B900000000          <1>     mov     ecx, 0          
    85                              <1>     
    86                              <1> divideLoop:
    87 0000005D 41                  <1>     inc     ecx             
    88 0000005E BA00000000          <1>     mov     edx, 0          
    89 00000063 BE0A000000          <1>     mov     esi, 10  
    90 00000068 F7FE                <1>     idiv    esi    
    91 0000006A 83C230              <1>     add     edx, 48  
    92 0000006D 52                  <1>     push    edx   
    93 0000006E 83F800              <1>     cmp     eax, 0   
    94 00000071 75EA                <1>     jnz     divideLoop  
    95                              <1> 
    96                              <1> printLoop:
    97 00000073 49                  <1>     dec     ecx       
    98 00000074 89E0                <1>     mov     eax, esp  
    99 00000076 E894FFFFFF          <1>     call    sprint   
   100 0000007B 58                  <1>     pop     eax    
   101 0000007C 83F900              <1>     cmp     ecx, 0   
   102 0000007F 75F2                <1>     jnz     printLoop  
   103                              <1> 
   104 00000081 5E                  <1>     pop     esi   
   105 00000082 5A                  <1>     pop     edx    
   106 00000083 59                  <1>     pop     ecx   
   107 00000084 58                  <1>     pop     eax           
   108 00000085 C3                  <1>     ret
   109                              <1> 
   110                              <1> 
   111                              <1> ;--------------- iprintLF   --------------------
   112                              <1> ; Функция вывода на экран чисел в формате ASCII
   113                              <1> ; входные данные: mov eax,<int>
   114                              <1> iprintLF:
   115 00000086 E8C9FFFFFF          <1>     call    iprint          
   116                              <1> 
   117 0000008B 50                  <1>     push    eax             
   118 0000008C B80A000000          <1>     mov     eax, 0Ah        
   119 00000091 50                  <1>     push    eax             
   120 00000092 89E0                <1>     mov     eax, esp       
   121 00000094 E876FFFFFF          <1>     call    sprint          
   122 00000099 58                  <1>     pop     eax             
   123 0000009A 58                  <1>     pop     eax             
   124 0000009B C3                  <1>     ret
   125                              <1> 
   126                              <1> ;----------------- atoi  ---------------------
   127                              <1> ; Функция преобразования ascii-код символа в целое число
   128                              <1> ; входные данные: mov eax,<int>
   129                              <1> atoi:
   130 0000009C 53                  <1>     push    ebx             
   131 0000009D 51                  <1>     push    ecx             
   132 0000009E 52                  <1>     push    edx             
   133 0000009F 56                  <1>     push    esi             
   134 000000A0 89C6                <1>     mov     esi, eax        
   135 000000A2 B800000000          <1>     mov     eax, 0          
   136 000000A7 B900000000          <1>     mov     ecx, 0          
   137                              <1>  
   138                              <1> .multiplyLoop:
   139 000000AC 31DB                <1>     xor     ebx, ebx        
   140 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   141 000000B1 80FB30              <1>     cmp     bl, 48 
   142 000000B4 7C14                <1>     jl      .finished 
   143 000000B6 80FB39              <1>     cmp     bl, 57  
   144 000000B9 7F0F                <1>     jg      .finished 
   145                              <1>  
   146 000000BB 80EB30              <1>     sub     bl, 48 
   147 000000BE 01D8                <1>     add     eax, ebx
   148 000000C0 BB0A000000          <1>     mov     ebx, 10  
   149 000000C5 F7E3                <1>     mul     ebx  
   150 000000C7 41                  <1>     inc     ecx   
   151 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   152                              <1>  
   153                              <1> .finished:
   154 000000CA 83F900              <1>     cmp     ecx, 0  
   155 000000CD 7407                <1>     je      .restore   
   156 000000CF BB0A000000          <1>     mov     ebx, 10  
   157 000000D4 F7F3                <1>     div     ebx     
   158                              <1>  
   159                              <1> .restore:
   160 000000D6 5E                  <1>     pop     esi   
   161 000000D7 5A                  <1>     pop     edx    
   162 000000D8 59                  <1>     pop     ecx  
   163 000000D9 5B                  <1>     pop     ebx 
   164 000000DA C3                  <1>     ret
   165                              <1> 
   166                              <1> 
   167                              <1> ;------------- quit   ---------------------
   168                              <1> ; Функция завершения программы
   169                              <1> quit:
   170 000000DB BB00000000          <1>     mov     ebx, 0      
   171 000000E0 B801000000          <1>     mov     eax, 1      
   172 000000E5 CD80                <1>     int     80h
   173 000000E7 C3                  <1>     ret
     4                                  SECTION .data
     5 00000000 D092D0B2D0B5D0B4D0-     msg: DB 'Введите No студенческого билета: ',0
     5 00000009 B8D182D0B5204E6F20-
     5 00000012 D181D182D183D0B4D0-
     5 0000001B B5D0BDD187D0B5D181-
     5 00000024 D0BAD0BED0B3D0BE20-
     5 0000002D D0B1D0B8D0BBD0B5D1-
     5 00000036 82D0B03A2000       
     6 0000003C D092D0B0D18820D0B2-     rem: DB 'Ваш вариант: ',0
     6 00000045 D0B0D180D0B8D0B0D0-
     6 0000004E BDD1823A2000       
     7                                  SECTION .bss
     8 00000000 <res 50h>               x: RESB 80
     9                                  SECTION .text
    10                                  GLOBAL _start
    11                                  _start:
    12 000000E8 B8[00000000]            mov eax, msg
    13 000000ED E83BFFFFFF              call sprintLF
    14 000000F2 B9[00000000]            mov ecx, x
    15 000000F7 BA50000000              mov edx, 80
    16 000000FC E842FFFFFF              call sread
    17 00000101 B8[00000000]            mov eax,x ; вызов подпрограммы преобразования
    18 00000106 E891FFFFFF              call atoi ; ASCII кода в число, `eax=x`
    19 0000010B 31D2                    xor edx,edx
    20 0000010D BB14000000              mov ebx,20
    21 00000112 F7F3                    div ebx
    22 00000114 42                      inc edx
    23 00000115 B8[3C000000]            mov eax,rem
    24 0000011A E8F0FEFFFF              call sprint
    25 0000011F 89D0                    mov eax,edx
    26 00000121 E860FFFFFF              call iprintLF
    27 00000126 E8B0FFFFFF              call quit
